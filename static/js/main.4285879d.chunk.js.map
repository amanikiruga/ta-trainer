{"version":3,"sources":["components/ControlPanel.tsx","components/CardViewer.tsx","interfaces/card.ts","components/TAList.tsx","AddPromptAnswerForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","props","useState","addTAInputBox","setAddTAInputBox","className","id","value","onInput","ev","target","placeholder","onClick","addTAEntry","shuffleTAEntries","onOpenModalBtn","promptBtnOnClick","randomCardIndexGenerator","answerBtnOnClick","isRevealAnswer","CardViewer","CARDS","activeCardIndex","prompt","answer","CardKind","TAList","TAEntriesToShow","TAEntries","map","entry","AddNewCardForm","currentCardsLength","kind","newCardValue","setNewCardValue","isOpen","ReactDOM","createPortal","onCloseModalBtn","onAddNewCardBtn","onChange","disabled","selected","hidden","Object","values","el","document","getElementById","App","getRandomCardIndex","Math","floor","random","length","randIndex","currentCardId","setCurrentCardId","setIsRevealAnswer","setTAEntries","setIsOpen","cardList","setCardList","shuffleListOfItems","listOfItems","listOfItemsCopy","slice","i","newCardToAdd","concat","newTAEntries","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.4285879d.chunk.js","sourcesContent":["import { useState } from \"react\";\n\ntype ControlPanelProps = {\n    className: string;\n    promptBtnOnClick: (value: number) => void;\n    answerBtnOnClick: (value: boolean) => void;\n    isRevealAnswer: boolean;\n    addTAEntry: (value: string) => void;\n    shuffleTAEntries: () => void;\n    randomCardIndexGenerator: () => number;\n    onOpenModalBtn: () => void;\n};\n\nexport const ControlPanel = (props: ControlPanelProps): JSX.Element => {\n    const [addTAInputBox, setAddTAInputBox] = useState<string>(\"\");\n\n    return (\n        <div className={props.className}>\n            <div id=\"control-panel\">\n                <h1>Control Panel </h1>\n\n                <input\n                    id=\"addTABox\"\n                    value={addTAInputBox}\n                    onInput={(ev) =>\n                        setAddTAInputBox(\n                            (ev.target as HTMLTextAreaElement).value\n                        )\n                    }\n                    placeholder=\"Add first and last name\"\n                ></input>\n                <button\n                    onClick={() => {\n                        props.addTAEntry(addTAInputBox);\n                        setAddTAInputBox(\"\");\n                    }}\n                >\n                    Add TA\n                </button>\n                <button onClick={props.shuffleTAEntries}>Shuffle order</button>\n                <button onClick={props.onOpenModalBtn}>Add Cards</button>\n\n                <button\n                    onClick={() =>\n                        props.promptBtnOnClick(props.randomCardIndexGenerator())\n                    }\n                >\n                    Swap Card\n                </button>\n                <button\n                    onClick={() =>\n                        props.answerBtnOnClick(!props.isRevealAnswer)\n                    }\n                >\n                    Show Answer\n                </button>\n            </div>\n        </div>\n    );\n};\n","\nimport CARDS from \"../assets/cards.json\" \ntype CardViewerProps = { \n    className: string,\n    isRevealAnswer: boolean,\n    activeCardIndex: number\n\n}\n//TODO: Remove type: any\nexport function CardViewer(props : CardViewerProps) : JSX.Element { \n\n    \n    \n    return ( \n        <div className={props.className}>\n            <h1>Card Viewer</h1>\n            <h2>Prompt</h2>\n            <p> {CARDS[props.activeCardIndex]?.prompt} </p>\n            <h2>{props.isRevealAnswer && \"Answer\"}</h2>\n            <p> { props.isRevealAnswer && CARDS[props.activeCardIndex]?.answer}</p>\n        </div>\n    )\n}","export enum CardKind {\n    TeachingHard = \"TeachingHard\",\n    TeachingEasy = \"TeachingEasy\",\n    Miroagressions = \"Microagressions\",\n}\n\nexport interface Card {\n    id: number;\n    kind: CardKind;\n    prompt: string;\n    answer: string;\n}\n","type TAListProps = {\n    className: string;\n    TAEntries: string[];\n};\n\nexport const TAList = (props: TAListProps): JSX.Element => {\n    let TAEntriesToShow = (\n        <ol>\n            {props.TAEntries.map((entry) => {\n                return <li> {entry} </li>;\n            })}\n        </ol>\n    );\n    return (\n        <div className={props.className} id=\"ta-list\">\n            <h1> Order </h1>\n            {TAEntriesToShow}\n        </div>\n    );\n};\n","import { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Card, CardKind } from \"./interfaces/card\";\n\ntype AddNewCardFormProps = {\n    isOpen: boolean;\n    currentCardsLength: number;\n    onCloseModalBtn: () => void;\n    onAddNewCardBtn: (newCardToAdd: Card) => void;\n};\n\nconst AddNewCardForm = (props: AddNewCardFormProps) => {\n    const [newCardValue, setNewCardValue] = useState<Card>({\n        id: props.currentCardsLength + 1,\n        kind: \"TeachingEasy\" as CardKind,\n        prompt: \"\",\n        answer: \"\",\n    });\n\n    if (!props.isOpen) return null;\n\n    return ReactDOM.createPortal(\n        <div>\n            <div\n                className=\"non-modal-overlay\"\n                onClick={props.onCloseModalBtn}\n            />\n            <div className=\"modal\">\n                <button\n                    onClick={() => {\n                        props.onAddNewCardBtn(newCardValue);\n                        props.onCloseModalBtn();\n                    }}\n                >\n                    Add Card\n                </button>\n                <input\n                    id=\"addPromptBox\"\n                    value={newCardValue.prompt}\n                    onInput={(ev) => {\n                        setNewCardValue({\n                            ...newCardValue,\n                            prompt: (ev.target as HTMLTextAreaElement).value,\n                        });\n                    }}\n                    placeholder=\"Add prompt\"\n                ></input>\n                <input\n                    id=\"addAnswerBox\"\n                    value={newCardValue.answer}\n                    onInput={(ev) => {\n                        setNewCardValue({\n                            ...newCardValue,\n                            answer: (ev.target as HTMLTextAreaElement).value,\n                        });\n                    }}\n                    placeholder=\"Add Answer\"\n                ></input>\n                <select\n                    onChange={(ev) => {\n                        setNewCardValue({\n                            ...newCardValue,\n                            kind: ev.target.value as CardKind,\n                        });\n                    }}\n                >\n                    <option disabled selected hidden>\n                        Select the kind of question\n                    </option>\n                    {Object.values(CardKind).map((el) => {\n                        return <option>{el}</option>;\n                    })}\n                </select>\n            </div>\n        </div>,\n        document.getElementById(\"modal-root\") as Element\n    );\n};\n\nexport default AddNewCardForm;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport CARDS from \"./assets/cards.json\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nimport { CardViewer } from \"./components/CardViewer\";\nimport \"./App.css\";\nimport { Card } from \"./interfaces/card\";\nimport { TAList } from \"./components/TAList\";\nimport { Type } from \"typescript\";\nimport AddNewCardForm from \"./AddPromptAnswerForm\";\nfunction App(): JSX.Element {\n    const getRandomCardIndex = () => {\n        return Math.floor(Math.random() * CARDS.length);\n    };\n    const randIndex = getRandomCardIndex();\n    const [currentCardId, setCurrentCardId] = useState<number>(randIndex);\n    const [isRevealAnswer, setIsRevealAnswer] = useState<boolean>(false);\n    const [TAEntries, setTAEntries] = useState<string[]>([]);\n    const [isOpen, setIsOpen] = useState(false);\n    const [cardList, setCardList] = useState<Card[]>(CARDS as Card[]);\n\n    const shuffleListOfItems = <T extends unknown>(listOfItems: Array<T>) => {\n        let listOfItemsCopy = listOfItems.slice();\n        for (let i = 0; i < listOfItemsCopy.length; i++) {\n            const randIndex = Math.floor(\n                Math.random() * listOfItemsCopy.length\n            );\n            //swap them randomly\n            [listOfItemsCopy[i], listOfItemsCopy[randIndex]] = [\n                listOfItemsCopy[randIndex],\n                listOfItemsCopy[i],\n            ];\n        }\n        return listOfItemsCopy;\n    };\n\n    const shuffleTAEntries = () => {\n        const shuffledTAEntries = shuffleListOfItems(TAEntries);\n        setTAEntries(shuffleListOfItems);\n    };\n\n    const addTAEntry = (entry: string) => {\n        const newTAEntries = TAEntries.concat(entry);\n        setTAEntries(newTAEntries);\n    };\n    return (\n        <div className=\"App\">\n            <div className=\"row\">\n                <div className=\"row-item\">\n                    {\" \"}\n                    <TAList\n                        className={\"row-item\"}\n                        TAEntries={TAEntries}\n                    ></TAList>\n                    <AddNewCardForm\n                        isOpen={isOpen}\n                        currentCardsLength={cardList.length}\n                        onAddNewCardBtn={(newCardToAdd: Card) =>\n                            setCardList(cardList.concat(newCardToAdd))\n                        }\n                        onCloseModalBtn={() => setIsOpen(false)}\n                    />\n                    <ControlPanel\n                        className={\"row-item\"}\n                        promptBtnOnClick={setCurrentCardId}\n                        answerBtnOnClick={setIsRevealAnswer}\n                        isRevealAnswer={isRevealAnswer}\n                        addTAEntry={addTAEntry}\n                        shuffleTAEntries={shuffleTAEntries}\n                        randomCardIndexGenerator={getRandomCardIndex}\n                        onOpenModalBtn={() => setIsOpen(true)}\n                    />\n                </div>\n\n                <div className=\"row-item\">\n                    <CardViewer\n                        className={\"\"}\n                        activeCardIndex={currentCardId}\n                        isRevealAnswer={isRevealAnswer}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import DraftApp from \"./draft/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}